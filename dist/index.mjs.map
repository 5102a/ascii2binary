{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["'use strict'\r\n\r\n// Base64 char code map\r\nconst baseCodeMap: Record<string, number> = {\r\n  0: 0b00110100,\r\n  1: 0b00110101,\r\n  2: 0b00110110,\r\n  3: 0b00110111,\r\n  4: 0b00111000,\r\n  5: 0b00111001,\r\n  6: 0b00111010,\r\n  7: 0b00111011,\r\n  8: 0b00111100,\r\n  9: 0b00111101,\r\n  A: 0b00000000,\r\n  B: 0b00000001,\r\n  C: 0b00000010,\r\n  D: 0b00000011,\r\n  E: 0b00000100,\r\n  F: 0b00000101,\r\n  G: 0b00000110,\r\n  H: 0b00000111,\r\n  I: 0b00001000,\r\n  J: 0b00001001,\r\n  K: 0b00001010,\r\n  L: 0b00001011,\r\n  M: 0b00001100,\r\n  N: 0b00001101,\r\n  O: 0b00001110,\r\n  P: 0b00001111,\r\n  Q: 0b00010000,\r\n  R: 0b00010001,\r\n  S: 0b00010010,\r\n  T: 0b00010011,\r\n  U: 0b00010100,\r\n  V: 0b00010101,\r\n  W: 0b00010110,\r\n  X: 0b00010111,\r\n  Y: 0b00011000,\r\n  Z: 0b00011001,\r\n  a: 0b00011010,\r\n  b: 0b00011011,\r\n  c: 0b00011100,\r\n  d: 0b00011101,\r\n  e: 0b00011110,\r\n  f: 0b00011111,\r\n  g: 0b00100000,\r\n  h: 0b00100001,\r\n  i: 0b00100010,\r\n  j: 0b00100011,\r\n  k: 0b00100100,\r\n  l: 0b00100101,\r\n  m: 0b00100110,\r\n  n: 0b00100111,\r\n  o: 0b00101000,\r\n  p: 0b00101001,\r\n  q: 0b00101010,\r\n  r: 0b00101011,\r\n  s: 0b00101100,\r\n  t: 0b00101101,\r\n  u: 0b00101110,\r\n  v: 0b00101111,\r\n  w: 0b00110000,\r\n  x: 0b00110001,\r\n  y: 0b00110010,\r\n  z: 0b00110011,\r\n  '+': 0b00111110,\r\n  '/': 0b00111111,\r\n  '=': 0b01000000,\r\n}\r\n\r\n/**\r\n * ascii to binary ( base64 string to ArrayBuffer)\r\n * @returns ArrayBuffer\r\n */\r\nconst ascii2binary = (base64Str: string) => {\r\n  let len = base64Str.length\r\n  if (!len || len % 4) {\r\n    throw Error('The base64 string length must be a multiple of 4')\r\n  }\r\n\r\n  const buff = []\r\n  let i = -1\r\n\r\n  let code1 = 0\r\n  let code2 = 0\r\n  let code3 = 0\r\n  let code4 = 0\r\n\r\n  len -= 2\r\n  while (++i < len) {\r\n    code1 = baseCodeMap[base64Str[i]]\r\n    code2 = baseCodeMap[base64Str[++i]]\r\n    code3 = baseCodeMap[base64Str[++i]]\r\n    code4 = baseCodeMap[base64Str[++i]]\r\n\r\n    buff.push(\r\n      (code1 << 2) | (code2 >>> 4),\r\n      ((code2 & 0b1111) << 4) | (code3 >>> 2),\r\n      ((code3 & 0b11) << 6) | (code4 & 0b111111)\r\n    )\r\n  }\r\n\r\n  if (code3 === 64) {\r\n    buff.pop()\r\n    buff.pop()\r\n  } else {\r\n    if (code4 === 64) {\r\n      buff.pop()\r\n    }\r\n  }\r\n\r\n  return Uint8Array.from(buff).buffer\r\n}\r\n\r\nexport { ascii2binary }\r\n"],
  "mappings": "AAGA,MAAMA,EAAsgBC,GAAsB,CAC1C,IAAIC,EAAMD,EAAU,OACpB,GAAI,CAACC,GAAOA,EAAM,EAChB,MAAM,MAAM,kDAAkD,EAGhE,MAAMC,EAAO,CAAC,EACd,IAAIC,EAAI,GAEJC,EAAQ,EACRC,EAAQ,EACRC,EAAQ,EACRC,EAAQ,EAGZ,IADAN,GAAO,EACA,EAAEE,EAAIF,GACXG,EAAQN,EAAYE,EAAUG,IAC9BE,EAAQP,EAAYE,EAAU,EAAEG,IAChCG,EAAQR,EAAYE,EAAU,EAAEG,IAChCI,EAAQT,EAAYE,EAAU,EAAEG,IAEhCD,EAAK,KACFE,GAAS,EAAMC,IAAU,GACxBA,EAAQ,KAAW,EAAMC,IAAU,GACnCA,EAAQ,IAAS,EAAMC,EAAQ,EACnC,EAGF,OAAID,IAAU,IACZJ,EAAK,IAAI,EACTA,EAAK,IAAI,GAELK,IAAU,IACZL,EAAK,IAAI,EAIN,WAAW,KAAKA,CAAI,EAAE,MAC/B",
  "names": ["baseCodeMap", "ascii2binary", "base64Str", "len", "buff", "i", "code1", "code2", "code3", "code4"]
}
